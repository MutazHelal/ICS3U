/*
  *Created by M.Helal
  *On November 7
  *to create a simple CD collection program
 */

import java.util.*;

public class CdCollection extends javax.swing.JFrame {

    ArrayList<String> collection = new ArrayList();
    ArrayList<String> collectionSorted = new ArrayList();

    /**
     * Creates new form CdCollection
     */
    public CdCollection() {
        initComponents();
        disableButtons();
    }

    private void disableButtons() {
        // Disable all buttons besides initialize
        displayButton.setEnabled(false);
        addButton.setEnabled(false);
        removeButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel1 = new javax.swing.JLabel();
        cdLabel = new javax.swing.JLabel();
        songInput = new javax.swing.JTextField();
        initButton = new javax.swing.JButton();
        displayButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        collectionOutput = new javax.swing.JTextArea();
        outputLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        titleLabel1.setForeground(new java.awt.Color(0, 0, 204));
        titleLabel1.setText("CD Collection");

        cdLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cdLabel.setText("Enter CD:");

        songInput.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        initButton.setText("Initialize");
        initButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initButtonActionPerformed(evt);
            }
        });

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        collectionOutput.setEditable(false);
        collectionOutput.setColumns(20);
        collectionOutput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        collectionOutput.setLineWrap(true);
        collectionOutput.setRows(5);
        collectionOutput.setWrapStyleWord(true);
        collectionOutput.setAutoscrolls(false);
        jScrollPane1.setViewportView(collectionOutput);

        outputLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        outputLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(initButton)
                                .addGap(18, 18, 18)
                                .addComponent(displayButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(removeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cdLabel)
                                .addGap(18, 18, 18)
                                .addComponent(songInput)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cdLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(initButton)
                        .addComponent(displayButton)
                        .addComponent(addButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        cdLabel.getAccessibleContext().setAccessibleName("CD Collection");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
        // Add default CD titles
        String[] cds = new String[]{"Metric - Fantasies",
            "Beatles - Abbey Road", "Pearl Jam - Ten", "Doors - Alive",
            "The Rolling Stones - Gimme Shelter"};
        Collections.addAll(collection, cds);
        Collections.addAll(collectionSorted, cds);

        // Disable initialize and enable all other buttons
        initButton.setEnabled(false);
        displayButton.setEnabled(true);
        addButton.setEnabled(true);
        removeButton.setEnabled(true);
    }//GEN-LAST:event_initButtonActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        // output both sorted and unsorted lists to the user
        String originalList = "Original Order:\n";
        String sortedList = "\nSorted Order:\n";
        for (int j = 0; j < collection.size(); j++) {
            originalList = originalList + collection.get(j) + "\n";
        }
        Collections.sort(collectionSorted, String.CASE_INSENSITIVE_ORDER);
        for (int i = 0; i < collectionSorted.size(); i++) {
            sortedList = sortedList + collectionSorted.get(i) + "\n";
        }
        collectionOutput.setText(originalList + sortedList);

        // enable both the add and remove buttons and clear the output label
        addButton.setEnabled(true);
        removeButton.setEnabled(true);
        outputLabel.setText("");
    }//GEN-LAST:event_displayButtonActionPerformed


    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // validate and add user input to the arrays
        int index = Collections.binarySearch(collectionSorted,
                songInput.getText(), String.CASE_INSENSITIVE_ORDER);
        boolean empty = songInput.getText().trim().isEmpty();

        if (empty) {
            outputLabel.setText("Please enter a valid CD you wish to add.");
        } else if (index >= 0) {
            outputLabel.setText("Please enter a CD you wish to add which is not"
                    + " present in the list.");
        } else {
            collection.add(songInput.getText());
            collectionSorted.add(songInput.getText());
            outputLabel.setText("CD succesfully added!");
            songInput.setText("");
            addButton.setEnabled(false);
            removeButton.setEnabled(false);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // validate and remove user desired CD from the arrays
        int index = Collections.binarySearch(collectionSorted,
                songInput.getText(), String.CASE_INSENSITIVE_ORDER);
        if (index >= 0) {
            collectionSorted.remove(index);
            collection.removeIf(cd -> cd.equalsIgnoreCase(songInput.getText()));
            songInput.setText("");
            outputLabel.setText("CD succesfully removed!");
            addButton.setEnabled(false);
            removeButton.setEnabled(false);
        } else if (index < 0) {
            outputLabel.setText("Please enter a valid CD in the collection that"
                    + " you wish to remove.");
        }

    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CdCollection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CdCollection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CdCollection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CdCollection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CdCollection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel cdLabel;
    private javax.swing.JTextArea collectionOutput;
    private javax.swing.JButton displayButton;
    private javax.swing.JButton initButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField songInput;
    private javax.swing.JLabel titleLabel1;
    // End of variables declaration//GEN-END:variables
}
